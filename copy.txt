Step 1: Create the Web Application
• Create a directory for your Flask app:
mkdir flaskapp
cd flaskapp
• Inside the directory, create a file named app.py with the following code:
from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello():
return "Hello, this is a Flask web server!"
if __name__ == "__main__":
app.run(host='0.0.0.0', port=5000)
• This simple app creates a Flask web server that listens on port 5000 and returns a message when
accessed.
Step 2: Create a requirements.txt File
• This file will list the dependencies required by the Flask app.
• Create requirements.txt with the following content:
• Flask==2.0.1
Step 3: Create a Dockerfile
Create a Dockerfile to containerize the Flask application:
# Use the official Python image
FROM python:3.9
# Set the working directory in the container
WORKDIR /app
# Copy the current directory contents into the container
COPY . /app
# Install any needed packages specified in requirements.txt
RUN pip install -r requirements.txt
# Make port 5000 available to the world outside this container
EXPOSE 5000
# Define environment variable
ENV NAME FlaskApp
# Run app.py when the container launches
CMD ["python", "app.py"]
Step 4: Build the Docker Image
• Build the Docker image for your Flask app by running the following command:
• docker build -t flask-webapp .
Step 5: Run the Docker Container
• Run the container and expose it on port 5000:
• docker run -d -p 5000:5000 flask-webapp
• Visit http://localhost:5000 in your browser, and you should see the message: "Hello, this is a
Flask web server!“

_____________________________________________________________________________

ssh

Exercise: Running a Shell Script on a Remote System Using SSH
Consider two systems:
1.	Local system [ initiate SSH connection ]
2.	Remote system – identify IP address, where the shell script will be executed
Steps:
1.	Open your terminal on the local system and generate an SSH key pair : ssh-keygen -t rsa -b 2048
2.	Save the keys to the default location (~.ssh/id_rsa)
3.	Copy the public key to the remote system: ssh-copy-id username@remote_ip_address
4.	Create a shell script on the remote system 
5.	Echo “hello SSH” and save it as a shell script
6.	Run the shell script from your local system using SSH: ssh username@remote_ip_address 'bash ~/test_script.sh'
7.	Check the output
Install the SSH Plugin in Jenkins:
•	Go to Manage Jenkins > Manage Plugins > Available.
•	Search for and install the SSH plugin (if not already installed).
Configure SSH in Jenkins:
•	Go to Manage Jenkins > Configure System.
•	Scroll down to the SSH remote hosts section and click Add.
•	Enter the following details:
o	Name: A name for this SSH configuration.
o	Hostname: The IP address of your remote system.
o	Username: The username to log into the remote system.
o	Private Key: Click Add and enter your private key (from ~/.ssh/id_rsa on your local system).
•	Click Save to save your SSH configuration.
Create a Jenkins Job to Run the Script via SSH:
•	Create a new Freestyle project in Jenkins.
•	Under Build, click Add build step > Execute shell.
•	


